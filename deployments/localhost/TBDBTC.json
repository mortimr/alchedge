{
  "address": "0x7BA6e0fbE5DED3e54F8eF1d766cBFFB5c0Bd3325",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_hegicBTCOptions",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_alUSD",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_Dai",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_Weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_Wbtc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_alUSDMetaPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapV2Router02",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "optionID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purchasePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "purchaseToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        }
      ],
      "name": "PurchaseOption",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "strike",
          "type": "uint256"
        },
        {
          "internalType": "enum IHegicOptionTypes.OptionType",
          "name": "optionType",
          "type": "uint8"
        }
      ],
      "name": "getAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getEthFeeFromAlUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "strike",
          "type": "uint256"
        },
        {
          "internalType": "enum IHegicOptionTypes.OptionType",
          "name": "optionType",
          "type": "uint8"
        }
      ],
      "name": "getOptionAmountFromAlUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getOptionsByOwner",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "priceInAlUSD",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITBD.Option[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getUnderlyingFeeFromAlUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "optionsByOwner",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceInAlUSD",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "strike",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "enum IHegicOptionTypes.OptionType",
          "name": "optionType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "minETH",
          "type": "uint256"
        }
      ],
      "name": "purchaseOptionWithAlUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "optionID",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uniswapBtcExchangePath",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uniswapExchangePath",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe1cde392838c8531f2e0c7ee74af8da049c4a15a5897f3cdf8c7a3f2b381d038",
  "receipt": {
    "to": null,
    "from": "0x634FC1A8ADdBB59aD54A7e825a0d70Aa40d3f157",
    "contractAddress": "0x7BA6e0fbE5DED3e54F8eF1d766cBFFB5c0Bd3325",
    "transactionIndex": 0,
    "gasUsed": "1727852",
    "logsBloom": "0x
    "blockHash": "0x8fb4b42c56e56e50baf3b00e5f5ab6502af80895fd06ee86cad1d6372ccdf9e6",
    "transactionHash": "0xe1cde392838c8531f2e0c7ee74af8da049c4a15a5897f3cdf8c7a3f2b381d038",
    "logs": [],
    "blockNumber": 12522192,
    "cumulativeGasUsed": "1727852",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3961245DB602eD7c03eECcda33eA3846bD8723BD",
    "0xBC6DA0FE9aD5f3b0d58160288917AA56653660E9",
    "0x6B175474E89094C44Da98b954EedeAC495271d0F",
    "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
    "0x2260fac5e5542a773aa44fbcfedf7c193bc2c599",
    "0x43b4fdfd4ff969587185cdb6f0bd875c5fc83f8c",
    "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D"
  ],
  "solcInputHash": "1cc859d9e2a57a84e82b151f389a84bb",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hegicBTCOptions\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_alUSD\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Dai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Wbtc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_alUSDMetaPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapV2Router02\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchasePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"purchaseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"PurchaseOption\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strike\",\"type\":\"uint256\"},{\"internalType\":\"enum IHegicOptionTypes.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"}],\"name\":\"getAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getEthFeeFromAlUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strike\",\"type\":\"uint256\"},{\"internalType\":\"enum IHegicOptionTypes.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"}],\"name\":\"getOptionAmountFromAlUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getOptionsByOwner\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInAlUSD\",\"type\":\"uint256\"}],\"internalType\":\"struct ITBD.Option[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getUnderlyingFeeFromAlUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"optionsByOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInAlUSD\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strike\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enum IHegicOptionTypes.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minETH\",\"type\":\"uint256\"}],\"name\":\"purchaseOptionWithAlUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"optionID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniswapBtcExchangePath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniswapExchangePath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAmount(uint256,uint256,uint256,uint8)\":{\"params\":{\"fees\":\"Amount of Eth paid\",\"optionType\":\"1 for PUT, 2 for CALL\",\"period\":\"Option period in seconds (min 1 day, max 28 days) \",\"strike\":\"Strike price (with 8 decimals)\"}},\"getEthFeeFromAlUSD(uint256)\":{\"params\":{\"amount\":\"alUSD amount used\"}},\"getOptionAmountFromAlUSD(uint256,uint256,uint256,uint8)\":{\"params\":{\"amount\":\"Amount of AlUSD paid\",\"optionType\":\"1 for PUT, 2 for CALL\",\"period\":\"Option period in seconds (min 1 day, max 28 days) \",\"strike\":\"Strike price (with 8 decimals)\"}},\"getOptionsByOwner(address)\":{\"params\":{\"owner\":\"Owner of the options to retrieve\"}},\"getUnderlyingFeeFromAlUSD(uint256)\":{\"params\":{\"amount\":\"alUSD amount used\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAmount(uint256,uint256,uint256,uint8)\":{\"notice\":\"Retrieve the option size from the raw eth fee paid to Hegic\"},\"getEthFeeFromAlUSD(uint256)\":{\"notice\":\"Retrieve option creation cost in eth\"},\"getOptionAmountFromAlUSD(uint256,uint256,uint256,uint8)\":{\"notice\":\"Retrieve the option size depending on all parameters + alUSD paid\"},\"getOptionsByOwner(address)\":{\"notice\":\"Retrieve created options\"},\"getUnderlyingFeeFromAlUSD(uint256)\":{\"notice\":\"Retrieve option creation cost in the underlying token\"},\"purchaseOptionWithAlUSD(uint256,uint256,uint256,address,uint8,uint256)\":{\"notice\":\"ITBD overriden functions\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TBDBTC.sol\":\"TBDBTC\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"contracts/TBDBTC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport './interfaces/IHegicBTCOptions.sol';\\nimport './interfaces/ICurve.sol';\\nimport './interfaces/IUniswapV2Router02.sol';\\nimport './interfaces/IChainlinkAggregatorV3.sol';\\nimport './interfaces/IERC20.sol';\\nimport './interfaces/IWETH.sol';\\nimport './interfaces/ITBD.sol';\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\n\\ncontract TBDBTC is ITBD {\\n    using SafeMath for uint256;\\n\\n    // Curve MetaPool used to convert alUSD to Dai\\n    ICurve alUSDMetaPool;\\n\\n    // Hegic BTC Options contract\\n    IHegicBTCOptions hegicBTCOptions;\\n\\n    // Uniswap router to convert Dai to Eth\\n    IUniswapV2Router02 uniswapV2Router02;\\n\\n    // alUSD, Dai, Wbtc and Weth ERC20 contracts\\n    IERC20 alUSD;\\n    IERC20 Dai;\\n    IERC20 Wbtc;\\n    IWETH Weth;\\n\\n    // Store of created options\\n    mapping(address => ITBD.Option[]) public optionsByOwner;\\n\\n    // Uniswap exchange paths Dai => Eth and Eth => Wbtc\\n    address[] public uniswapExchangePath;\\n    address[] public uniswapBtcExchangePath;\\n\\n    // Decimals for price values from aggregators\\n    uint256 constant PRICE_DECIMALS = 1e8;\\n\\n    constructor(\\n        address _hegicBTCOptions,\\n        address _alUSD,\\n        address _Dai,\\n        address _Weth,\\n        address _Wbtc,\\n        address _alUSDMetaPool,\\n        address _uniswapV2Router02\\n    ) {\\n        alUSDMetaPool = ICurve(_alUSDMetaPool);\\n        hegicBTCOptions = IHegicBTCOptions(_hegicBTCOptions);\\n        alUSD = IERC20(_alUSD);\\n        Dai = IERC20(_Dai);\\n        Weth = IWETH(_Weth);\\n        Wbtc = IERC20(_Wbtc);\\n        uniswapV2Router02 = IUniswapV2Router02(_uniswapV2Router02);\\n\\n        uniswapExchangePath = new address[](2);\\n        uniswapExchangePath[0] = _Dai;\\n        uniswapExchangePath[1] = _Weth;\\n\\n        uniswapBtcExchangePath = new address[](2);\\n        uniswapBtcExchangePath[0] = _Weth;\\n        uniswapBtcExchangePath[1] = _Wbtc;\\n    }\\n\\n    /// ITBD overriden functions\\n\\n    function purchaseOptionWithAlUSD(\\n        uint256 amount,\\n        uint256 strike,\\n        uint256 period,\\n        address owner,\\n        IHegicOptionTypes.OptionType optionType,\\n        uint256 minETH\\n    ) public override returns (uint256 optionID) {\\n        // Retrieve alUSD from user\\n        require(alUSD.transferFrom(msg.sender, address(this), amount), 'TBD/cannot-transfer-alusd');\\n\\n        // Compute curve output amount in Dai\\n        uint256 curveDyInDai = alUSDMetaPool.get_dy_underlying(0, 1, amount);\\n        // Approve alUSD for curve\\n        alUSD.approve(address(alUSDMetaPool), amount);\\n        // Swap alUSD to Dai\\n        require(\\n            alUSDMetaPool.exchange_underlying(int128(0), int128(1), amount, curveDyInDai) == curveDyInDai,\\n            'TBD/cannot-swap-alusd-to-dai'\\n        );\\n\\n        // Compute amount of Eth retrievable from Swap & check if above minimal Eth value provided\\n        // Doing it soon prevents extra gas usage in case of failure due to useless approval and swap\\n        uint256[] memory uniswapAmounts = uniswapV2Router02.getAmountsOut(curveDyInDai, uniswapExchangePath);\\n        require(uniswapAmounts[1] > minETH, 'TBD/min-eth-not-reached');\\n\\n        // Approve Dai to Uniswap Router\\n        Dai.approve(address(uniswapV2Router02), curveDyInDai);\\n\\n        // Swap Dai for Eth\\n        uniswapAmounts =\\n            uniswapV2Router02.swapExactTokensForETH(\\n                curveDyInDai,\\n                minETH,\\n                uniswapExchangePath,\\n                address(this),\\n                block.timestamp\\n            );\\n\\n        // Reverse compute option amount\\n        uint256 optionAmount = getAmount(period, uniswapAmounts[1], strike, optionType);\\n\\n        // Create and send option to owner\\n        optionID = hegicBTCOptions.create{value: uniswapAmounts[1]}(period, optionAmount, strike, optionType);\\n        hegicBTCOptions.transfer(optionID, payable(owner));\\n\\n        emit PurchaseOption(owner, optionID, amount, address(alUSD), uniswapAmounts[1]);\\n\\n        // Store option\\n        optionsByOwner[msg.sender].push(ITBD.Option({id: optionID, priceInAlUSD: amount}));\\n\\n        return optionID;\\n    }\\n\\n    function getOptionsByOwner(address owner) external view override returns (ITBD.Option[] memory) {\\n        return optionsByOwner[owner];\\n    }\\n\\n    function getUnderlyingFeeFromAlUSD(uint256 amount) external view override returns (uint256) {\\n        uint256 curveDyInDai = alUSDMetaPool.get_dy_underlying(0, 1, amount);\\n        uint256[] memory uniswapWethOutput = uniswapV2Router02.getAmountsOut(curveDyInDai, uniswapExchangePath);\\n        return uniswapV2Router02.getAmountsOut(uniswapWethOutput[1], uniswapBtcExchangePath)[1];\\n    }\\n\\n    function getEthFeeFromAlUSD(uint256 amount) external view override returns (uint256) {\\n        uint256 curveDyInDai = alUSDMetaPool.get_dy_underlying(0, 1, amount);\\n        return uniswapV2Router02.getAmountsOut(curveDyInDai, uniswapExchangePath)[1];\\n    }\\n\\n    function getOptionAmountFromAlUSD(\\n        uint256 period,\\n        uint256 amount,\\n        uint256 strike,\\n        IHegicOptionTypes.OptionType optionType\\n    ) external view override returns (uint256) {\\n        uint256 curveDyInDai = alUSDMetaPool.get_dy_underlying(0, 1, amount);\\n        uint256[] memory uniswapWethOutput = uniswapV2Router02.getAmountsOut(curveDyInDai, uniswapExchangePath);\\n\\n        return getAmount(period, uniswapWethOutput[1], strike, optionType);\\n    }\\n\\n    function getAmount(\\n        uint256 period,\\n        uint256 fees,\\n        uint256 strike,\\n        IHegicOptionTypes.OptionType optionType\\n    ) public view override returns (uint256) {\\n        require(\\n            optionType == IHegicOptionTypes.OptionType.Put || optionType == IHegicOptionTypes.OptionType.Call,\\n            'invalid option type'\\n        );\\n        (, int256 latestPrice, , , ) = IChainlinkAggregatorV3(hegicBTCOptions.priceProvider()).latestRoundData();\\n        uint256 currentPrice = uint256(latestPrice);\\n        uint256 iv = hegicBTCOptions.impliedVolRate();\\n        uint256 convertedFees = uniswapV2Router02.getAmountsOut(fees, uniswapBtcExchangePath)[1];\\n\\n        if (optionType == IHegicOptionTypes.OptionType.Put) {\\n            if (strike > currentPrice) {\\n                // ITM Put Fee\\n                uint256 nume = convertedFees.mul(currentPrice).mul(PRICE_DECIMALS);\\n                uint256 sqrtPeriod = sqrt(period);\\n                uint256 denom = currentPrice.mul(PRICE_DECIMALS).div(100);\\n                denom = denom.add(sqrtPeriod.mul(iv).mul(strike));\\n                denom = denom.add(PRICE_DECIMALS.mul(strike.sub(currentPrice)));\\n                return nume.div(denom);\\n            } else {\\n                // OTM Put Fee\\n                uint256 nume = convertedFees.mul(currentPrice).mul(PRICE_DECIMALS);\\n                uint256 sqrtPeriod = sqrt(period);\\n                uint256 denom = sqrtPeriod.mul(strike).mul(iv).add(currentPrice.mul(PRICE_DECIMALS).div(100));\\n                return nume.div(denom);\\n            }\\n        } else {\\n            if (strike < currentPrice) {\\n                // ITM Call Fee\\n                uint256 nume = convertedFees.mul(strike).mul(PRICE_DECIMALS).mul(currentPrice);\\n                uint256 sqrtPeriod = sqrt(period);\\n                uint256 denom = strike.mul(PRICE_DECIMALS).div(100).mul(currentPrice);\\n                denom = denom.add(sqrtPeriod.mul(iv).mul(currentPrice).mul(currentPrice));\\n                denom = denom.add(strike.mul(PRICE_DECIMALS).mul(currentPrice.sub(strike)));\\n                return nume.div(denom);\\n            } else {\\n                // OTM Call Fee\\n                uint256 nume = convertedFees.mul(strike).mul(PRICE_DECIMALS);\\n                uint256 sqrtPeriod = sqrt(period);\\n                uint256 denom = sqrtPeriod.mul(currentPrice).mul(iv).add(strike.mul(PRICE_DECIMALS).div(100));\\n                return nume.div(denom);\\n            }\\n        }\\n    }\\n\\n    /// Misc\\n\\n    function sqrt(uint256 x) private pure returns (uint256 result) {\\n        result = x;\\n        uint256 k = x.div(2).add(1);\\n        while (k < result) (result, k) = (k, x.div(k).add(k).div(2));\\n    }\\n\\n    receive() external payable {}\\n\\n}\\n\",\"keccak256\":\"0xb72044dd460a4766067b2e72b32f2664a97141c47e279aa9d3815c8b811be634\",\"license\":\"MIT\"},\"contracts/interfaces/IChainlinkAggregatorV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface IChainlinkAggregatorV3 {\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x6bf83183d5b801ce3043ca958ee7876dbc487af64043bef4e20ad86d26cd4659\",\"license\":\"MIT\"},\"contracts/interfaces/ICurve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface ICurve {\\n    function get_dy_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x1e1d03f38cfdee89ae8a8792e463c5a4209a96b605480c53399ebabfc0877adc\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface IERC20 {\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x849f728bdcb28a2e01f4280f64cbbaf982cded062f1a9aefe8039f7aa28726af\",\"license\":\"MIT\"},\"contracts/interfaces/IHegicBTCOptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\nimport './IHegicOptionTypes.sol';\\n\\ninterface IHegicBTCOptions is IHegicOptionTypes {\\n    function priceProvider() external view returns (address);\\n\\n    function impliedVolRate() external view returns (uint256);\\n\\n    enum State {Inactive, Active, Exercised, Expired}\\n\\n    function exercise(uint256 optionID) external;\\n\\n    function options(uint256)\\n        external\\n        view\\n        returns (\\n            State state,\\n            address payable holder,\\n            uint256 strike,\\n            uint256 amount,\\n            uint256 lockedAmount,\\n            uint256 premium,\\n            uint256 expiration,\\n            IHegicOptionTypes.OptionType optionType\\n        );\\n\\n    struct Option {\\n        State state;\\n        address payable holder;\\n        uint256 strike;\\n        uint256 amount;\\n        uint256 lockedAmount;\\n        uint256 premium;\\n        uint256 expiration;\\n        IHegicOptionTypes.OptionType optionType;\\n    }\\n\\n    function fees(\\n        uint256 period,\\n        uint256 amount,\\n        uint256 strike,\\n        IHegicOptionTypes.OptionType optionType\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 total,\\n            uint256 totalETH,\\n            uint256 settlementFee,\\n            uint256 strikeFee,\\n            uint256 periodFee\\n        );\\n\\n    function create(\\n        uint256 period,\\n        uint256 amount,\\n        uint256 strike,\\n        IHegicOptionTypes.OptionType optionType\\n    ) external payable returns (uint256 optionID);\\n\\n    function transfer(uint256 optionID, address payable newHolder) external;\\n}\\n\",\"keccak256\":\"0xec81f329bdc0bb66e0d2cd75f372995154a057e70dc00362a8433e44bbf0c11d\",\"license\":\"MIT\"},\"contracts/interfaces/IHegicOptionTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface IHegicOptionTypes {\\n    enum OptionType {Invalid, Put, Call}\\n\\n}\",\"keccak256\":\"0xfe2207cb676c1d8c793fb68488cfce246cf20236975d5affc1669064cd1ecc95\",\"license\":\"MIT\"},\"contracts/interfaces/ITBD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport './IHegicOptionTypes.sol';\\n\\ninterface ITBD {\\n    event PurchaseOption(\\n        address indexed owner,\\n        uint256 optionID,\\n        uint256 purchasePrice,\\n        address purchaseToken,\\n        uint256 fees\\n    );\\n\\n    struct Option {\\n        uint256 id;\\n        uint256 priceInAlUSD;\\n    }\\n\\n    /// @notice Convert alUSD to Dai using Curve, Dai to Weth using Uniswap and purchases option on Hegic\\n    /// @param amount Amount of AlUSD paid\\n    /// @param strike Strike price (with 8 decimals)\\n    /// @param period Option period in seconds (min 1 day, max 28 days) \\n    /// @param owner Address where option is sent \\n    /// @param optionType 1 for PUT, 2 for CALL\\n    /// @param minETH Prevents high slippage by setting min eth after swaps\\n    function purchaseOptionWithAlUSD(\\n        uint256 amount,\\n        uint256 strike,\\n        uint256 period,\\n        address owner,\\n        IHegicOptionTypes.OptionType optionType,\\n        uint256 minETH\\n    ) external returns (uint256 optionID);\\n\\n    /// @notice Retrieve created options\\n    /// @param owner Owner of the options to retrieve\\n    function getOptionsByOwner(address owner) external view returns (Option[] memory);\\n\\n    /// @notice Retrieve option creation cost in the underlying token\\n    /// @param amount alUSD amount used\\n    function getUnderlyingFeeFromAlUSD(uint256 amount) external view returns (uint256);\\n\\n    /// @notice Retrieve option creation cost in eth\\n    /// @param amount alUSD amount used\\n    function getEthFeeFromAlUSD(uint256 amount) external view returns (uint256);\\n\\n    /// @notice Retrieve the option size depending on all parameters + alUSD paid\\n    /// @param amount Amount of AlUSD paid\\n    /// @param strike Strike price (with 8 decimals)\\n    /// @param period Option period in seconds (min 1 day, max 28 days) \\n    /// @param optionType 1 for PUT, 2 for CALL\\n    function getOptionAmountFromAlUSD(\\n        uint256 period,\\n        uint256 amount,\\n        uint256 strike,\\n        IHegicOptionTypes.OptionType optionType\\n    ) external view returns (uint256);\\n\\n    /// @notice Retrieve the option size from the raw eth fee paid to Hegic\\n    /// @param period Option period in seconds (min 1 day, max 28 days) \\n    /// @param fees Amount of Eth paid\\n    /// @param strike Strike price (with 8 decimals)\\n    /// @param optionType 1 for PUT, 2 for CALL\\n    function getAmount(\\n        uint256 period,\\n        uint256 fees,\\n        uint256 strike,\\n        IHegicOptionTypes.OptionType optionType\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9476eadb372feda9f58d86ba015529495a5d8e5a7c10bcc04a0694857a9145c8\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface IUniswapV2Router02 {\\n    function getAmountsOut(uint256 amountIn, address[] memory path) external view returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8d877d2c091105ba4fa81b21702c3e095bbf1056b103a4cc3f5619b265b6d075\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\nimport './IERC20.sol';\\n\\ninterface IWETH is IERC20 {\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0x4af11c50532a882b5e27cb1a76168a0ada2e5e780dcf34e5f5b887f6ea35685d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001c3738038062001c378339810160408190526200003491620002a7565b600080546001600160a01b03199081166001600160a01b03858116919091179092556001805482168a84161790556003805482168984161790556004805482168884161790556006805482168784161790556005805482168684161790556002805490911691831691909117815560408051828152606081018252919060208301908036833750508151620000d192600892506020019062000209565b50846008600081548110620000e257fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508360086001815481106200012057fe5b600091825260209091200180546001600160a01b03929092166001600160a01b03199092169190911790556040805160028082526060820190925290816020016020820280368337505081516200017f92600992506020019062000209565b508360096000815481106200019057fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550826009600181548110620001ce57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550505050505050506200033b565b82805482825590600052602060002090810192821562000261579160200282015b828111156200026157825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906200022a565b506200026f92915062000273565b5090565b5b808211156200026f576000815560010162000274565b80516001600160a01b0381168114620002a257600080fd5b919050565b600080600080600080600060e0888a031215620002c2578283fd5b620002cd886200028a565b9650620002dd602089016200028a565b9550620002ed604089016200028a565b9450620002fd606089016200028a565b93506200030d608089016200028a565b92506200031d60a089016200028a565b91506200032d60c089016200028a565b905092959891949750929550565b6118ec806200034b6000396000f3fe60806040526004361061008a5760003560e01c806383d3bb791161005957806383d3bb791461015457806397bcb1a714610174578063cd3a1ca214610194578063e8d53be6146101b4578063f43e56d7146101d457610091565b80630c242f0c1461009657806351826dbd146100cc5780637a6d1cfe146100f95780637dd8828a1461012757610091565b3661009157005b600080fd5b3480156100a257600080fd5b506100b66100b1366004611499565b6101f4565b6040516100c391906117a8565b60405180910390f35b3480156100d857600080fd5b506100ec6100e7366004611368565b61031f565b6040516100c39190611646565b34801561010557600080fd5b506101196101143660046113a0565b6103a8565b6040516100c39291906117e1565b34801561013357600080fd5b50610147610142366004611499565b6103e4565b6040516100c391906115f5565b34801561016057600080fd5b506100b661016f366004611499565b61040e565b34801561018057600080fd5b5061014761018f366004611499565b6105de565b3480156101a057600080fd5b506100b66101af366004611522565b6105ee565b3480156101c057600080fd5b506100b66101cf366004611522565b610730565b3480156101e057600080fd5b506100b66101ef3660046114c9565b610b63565b600080546040516307211ef760e01b815282916001600160a01b0316906307211ef79061022a90849060019088906004016116b8565b60206040518083038186803b15801561024257600080fd5b505afa158015610256573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027a91906114b1565b60025460405163d06ca61f60e01b81529192506001600160a01b03169063d06ca61f906102ae9084906008906004016117c8565b60006040518083038186803b1580156102c657600080fd5b505afa1580156102da573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261030291908101906113cb565b60018151811061030e57fe5b60200260200101519150505b919050565b6001600160a01b0381166000908152600760209081526040808320805482518185028101850190935280835260609492939192909184015b8282101561039d57838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190610357565b505050509050919050565b600760205281600052604060002081815481106103c457600080fd5b600091825260209091206002909102018054600190910154909250905082565b600981815481106103f457600080fd5b6000918252602090912001546001600160a01b0316905081565b600080546040516307211ef760e01b815282916001600160a01b0316906307211ef79061044490849060019088906004016116b8565b60206040518083038186803b15801561045c57600080fd5b505afa158015610470573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049491906114b1565b60025460405163d06ca61f60e01b81529192506000916001600160a01b039091169063d06ca61f906104cd9085906008906004016117c8565b60006040518083038186803b1580156104e557600080fd5b505afa1580156104f9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261052191908101906113cb565b60025481519192506001600160a01b03169063d06ca61f908390600190811061054657fe5b602002602001015160096040518363ffffffff1660e01b815260040161056d9291906117c8565b60006040518083038186803b15801561058557600080fd5b505afa158015610599573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105c191908101906113cb565b6001815181106105cd57fe5b602002602001015192505050919050565b600881815481106103f457600080fd5b600080546040516307211ef760e01b815282916001600160a01b0316906307211ef7906106249084906001908a906004016116b8565b60206040518083038186803b15801561063c57600080fd5b505afa158015610650573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067491906114b1565b60025460405163d06ca61f60e01b81529192506000916001600160a01b039091169063d06ca61f906106ad9085906008906004016117c8565b60006040518083038186803b1580156106c557600080fd5b505afa1580156106d9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261070191908101906113cb565b9050610723878260018151811061071457fe5b60200260200101518787610730565b925050505b949350505050565b6000600182600281111561074057fe5b14806107575750600282600281111561075557fe5b145b61077c5760405162461bcd60e51b81526004016107739061170d565b60405180910390fd5b60015460408051635c4443cf60e11b815290516000926001600160a01b03169163b888879e916004808301926020929190829003018186803b1580156107c157600080fd5b505afa1580156107d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f99190611384565b6001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561083157600080fd5b505afa158015610845573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108699190611560565b5050600154604080516318f88e5b60e01b815290519395508594506000936001600160a01b0390921692506318f88e5b916004808301926020929190829003018186803b1580156108b957600080fd5b505afa1580156108cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f191906114b1565b60025460405163d06ca61f60e01b81529192506000916001600160a01b039091169063d06ca61f9061092a908b906009906004016117c8565b60006040518083038186803b15801561094257600080fd5b505afa158015610956573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261097e91908101906113cb565b60018151811061098a57fe5b60200260200101519050600160028111156109a157fe5b8660028111156109ad57fe5b1415610a9f5782871115610a505760006109d56305f5e1006109cf848761117d565b9061117d565b905060006109e28b6111df565b905060006109ff60646109f9886305f5e10061117d565b90611221565b9050610a19610a128b6109cf858961117d565b8290611288565b9050610a36610a12610a2b8c896112e2565b6305f5e1009061117d565b9050610a428382611221565b975050505050505050610728565b6000610a646305f5e1006109cf848761117d565b90506000610a718b6111df565b90506000610a36610a8b60646109f9896305f5e10061117d565b610a99876109cf868f61117d565b90611288565b82871015610b1a576000610abd846109cf6305f5e10081868d61117d565b90506000610aca8b6111df565b90506000610ae5866109cf60646109f98e6305f5e10061117d565b9050610afa610a12876109cf8181878b61117d565b9050610a36610a12610b0c888d6112e2565b6109cf8d6305f5e10061117d565b6000610b2e6305f5e1006109cf848b61117d565b90506000610b3b8b6111df565b90506000610a36610b5560646109f98d6305f5e10061117d565b610a99876109cf868b61117d565b6003546040516323b872dd60e01b81526000916001600160a01b0316906323b872dd90610b9890339030908c90600401611609565b602060405180830381600087803b158015610bb257600080fd5b505af1158015610bc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bea9190611479565b610c065760405162461bcd60e51b815260040161077390611771565b600080546040516307211ef760e01b81526001600160a01b03909116906307211ef790610c3c9084906001908d906004016116b8565b60206040518083038186803b158015610c5457600080fd5b505afa158015610c68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8c91906114b1565b60035460005460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b392610cc49216908c9060040161162d565b602060405180830381600087803b158015610cde57600080fd5b505af1158015610cf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d169190611479565b5060008054604051635320bf6b60e11b815283926001600160a01b039092169163a6417ed691610d5091906001908e908790600401611695565b602060405180830381600087803b158015610d6a57600080fd5b505af1158015610d7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da291906114b1565b14610dbf5760405162461bcd60e51b8152600401610773906116d6565b60025460405163d06ca61f60e01b81526000916001600160a01b03169063d06ca61f90610df39085906008906004016117c8565b60006040518083038186803b158015610e0b57600080fd5b505afa158015610e1f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e4791908101906113cb565b90508381600181518110610e5757fe5b602002602001015111610e7c5760405162461bcd60e51b81526004016107739061173a565b6004805460025460405163095ea7b360e01b81526001600160a01b039283169363095ea7b393610eb093169187910161162d565b602060405180830381600087803b158015610eca57600080fd5b505af1158015610ede573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f029190611479565b506002546040516318cbafe560e01b81526001600160a01b03909116906318cbafe590610f3c908590889060089030904290600401611813565b600060405180830381600087803b158015610f5657600080fd5b505af1158015610f6a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f9291908101906113cb565b90506000610fb68883600181518110610fa757fe5b60200260200101518b89610730565b6001805484519293506001600160a01b0316916380478ad19185918110610fd957fe5b60200260200101518a848d8b6040518663ffffffff1660e01b8152600401611004949392919061184f565b6020604051808303818588803b15801561101d57600080fd5b505af1158015611031573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061105691906114b1565b60015460405163b7760c8f60e01b81529195506001600160a01b03169063b7760c8f906110899087908b906004016117b1565b600060405180830381600087803b1580156110a357600080fd5b505af11580156110b7573d6000803e3d6000fd5b50505050866001600160a01b03167fe449c77d99738f1181f3e8a97bc3c10c842af5b92aa379a34eb4d6bc1a137a79858c600360009054906101000a90046001600160a01b03168660018151811061110b57fe5b602002602001015160405161112394939291906117ef565b60405180910390a2505033600090815260076020908152604080832081518083019092528582528183018c815281546001818101845592865293909420915160029093029091019182559151910155509695505050505050565b60008261118c575060006111d9565b8282028284828161119957fe5b04146111d65760405162461bcd60e51b81526004018080602001828103825260218152602001806118966021913960400191505060405180910390fd5b90505b92915050565b8060006111f26001610a99846002611221565b90505b8181101561121b578061121160026109f983610a998882611221565b90925090506111f5565b50919050565b6000808211611277576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161128057fe5b049392505050565b6000828201838110156111d6576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082821115611339576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b80356003811061031a57600080fd5b805169ffffffffffffffffffff8116811461031a57600080fd5b600060208284031215611379578081fd5b81356111d68161187d565b600060208284031215611395578081fd5b81516111d68161187d565b600080604083850312156113b2578081fd5b82356113bd8161187d565b946020939093013593505050565b600060208083850312156113dd578182fd5b825167ffffffffffffffff808211156113f4578384fd5b818501915085601f830112611407578384fd5b81518181111561141357fe5b8381026040518582820101818110858211171561142c57fe5b604052828152858101935084860182860187018a101561144a578788fd5b8795505b8386101561146c57805185526001959095019493860193860161144e565b5098975050505050505050565b60006020828403121561148a578081fd5b815180151581146111d6578182fd5b6000602082840312156114aa578081fd5b5035919050565b6000602082840312156114c2578081fd5b5051919050565b60008060008060008060c087890312156114e1578182fd5b86359550602087013594506040870135935060608701356115018161187d565b925061150f6080880161133f565b915060a087013590509295509295509295565b60008060008060808587031215611537578384fd5b8435935060208501359250604085013591506115556060860161133f565b905092959194509250565b600080600080600060a08688031215611577578081fd5b6115808661134e565b94506020860151935060408601519250606086015191506115a36080870161134e565b90509295509295909350565b6000815480845260208085019450838352808320835b838110156115ea5781546001600160a01b0316875295820195600191820191016115c5565b509495945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b602080825282518282018190526000919060409081850190868401855b8281101561168857815180518552860151868501529284019290850190600101611663565b5091979650505050505050565b600f94850b81529290930b60208301526040820152606081019190915260800190565b600f93840b81529190920b6020820152604081019190915260600190565b6020808252601c908201527f5442442f63616e6e6f742d737761702d616c7573642d746f2d64616900000000604082015260600190565b602080825260139082015272696e76616c6964206f7074696f6e207479706560681b604082015260600190565b60208082526017908201527f5442442f6d696e2d6574682d6e6f742d72656163686564000000000000000000604082015260600190565b60208082526019908201527f5442442f63616e6e6f742d7472616e736665722d616c75736400000000000000604082015260600190565b90815260200190565b9182526001600160a01b0316602082015260400190565b60008382526040602083015261072860408301846115af565b918252602082015260400190565b93845260208401929092526001600160a01b03166040830152606082015260800190565b600086825285602083015260a0604083015261183260a08301866115af565b6001600160a01b0394909416606083015250608001529392505050565b8481526020810184905260408101839052608081016003831061186e57fe5b82606083015295945050505050565b6001600160a01b038116811461189257600080fd5b5056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a264697066735822122035638aa1ca045a99a692a8af8523e18f53d0b258140137c0bcccac2b5a54fa9264736f6c63430007060033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c806383d3bb791161005957806383d3bb791461015457806397bcb1a714610174578063cd3a1ca214610194578063e8d53be6146101b4578063f43e56d7146101d457610091565b80630c242f0c1461009657806351826dbd146100cc5780637a6d1cfe146100f95780637dd8828a1461012757610091565b3661009157005b600080fd5b3480156100a257600080fd5b506100b66100b1366004611499565b6101f4565b6040516100c391906117a8565b60405180910390f35b3480156100d857600080fd5b506100ec6100e7366004611368565b61031f565b6040516100c39190611646565b34801561010557600080fd5b506101196101143660046113a0565b6103a8565b6040516100c39291906117e1565b34801561013357600080fd5b50610147610142366004611499565b6103e4565b6040516100c391906115f5565b34801561016057600080fd5b506100b661016f366004611499565b61040e565b34801561018057600080fd5b5061014761018f366004611499565b6105de565b3480156101a057600080fd5b506100b66101af366004611522565b6105ee565b3480156101c057600080fd5b506100b66101cf366004611522565b610730565b3480156101e057600080fd5b506100b66101ef3660046114c9565b610b63565b600080546040516307211ef760e01b815282916001600160a01b0316906307211ef79061022a90849060019088906004016116b8565b60206040518083038186803b15801561024257600080fd5b505afa158015610256573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027a91906114b1565b60025460405163d06ca61f60e01b81529192506001600160a01b03169063d06ca61f906102ae9084906008906004016117c8565b60006040518083038186803b1580156102c657600080fd5b505afa1580156102da573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261030291908101906113cb565b60018151811061030e57fe5b60200260200101519150505b919050565b6001600160a01b0381166000908152600760209081526040808320805482518185028101850190935280835260609492939192909184015b8282101561039d57838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190610357565b505050509050919050565b600760205281600052604060002081815481106103c457600080fd5b600091825260209091206002909102018054600190910154909250905082565b600981815481106103f457600080fd5b6000918252602090912001546001600160a01b0316905081565b600080546040516307211ef760e01b815282916001600160a01b0316906307211ef79061044490849060019088906004016116b8565b60206040518083038186803b15801561045c57600080fd5b505afa158015610470573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049491906114b1565b60025460405163d06ca61f60e01b81529192506000916001600160a01b039091169063d06ca61f906104cd9085906008906004016117c8565b60006040518083038186803b1580156104e557600080fd5b505afa1580156104f9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261052191908101906113cb565b60025481519192506001600160a01b03169063d06ca61f908390600190811061054657fe5b602002602001015160096040518363ffffffff1660e01b815260040161056d9291906117c8565b60006040518083038186803b15801561058557600080fd5b505afa158015610599573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105c191908101906113cb565b6001815181106105cd57fe5b602002602001015192505050919050565b600881815481106103f457600080fd5b600080546040516307211ef760e01b815282916001600160a01b0316906307211ef7906106249084906001908a906004016116b8565b60206040518083038186803b15801561063c57600080fd5b505afa158015610650573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067491906114b1565b60025460405163d06ca61f60e01b81529192506000916001600160a01b039091169063d06ca61f906106ad9085906008906004016117c8565b60006040518083038186803b1580156106c557600080fd5b505afa1580156106d9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261070191908101906113cb565b9050610723878260018151811061071457fe5b60200260200101518787610730565b925050505b949350505050565b6000600182600281111561074057fe5b14806107575750600282600281111561075557fe5b145b61077c5760405162461bcd60e51b81526004016107739061170d565b60405180910390fd5b60015460408051635c4443cf60e11b815290516000926001600160a01b03169163b888879e916004808301926020929190829003018186803b1580156107c157600080fd5b505afa1580156107d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f99190611384565b6001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561083157600080fd5b505afa158015610845573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108699190611560565b5050600154604080516318f88e5b60e01b815290519395508594506000936001600160a01b0390921692506318f88e5b916004808301926020929190829003018186803b1580156108b957600080fd5b505afa1580156108cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f191906114b1565b60025460405163d06ca61f60e01b81529192506000916001600160a01b039091169063d06ca61f9061092a908b906009906004016117c8565b60006040518083038186803b15801561094257600080fd5b505afa158015610956573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261097e91908101906113cb565b60018151811061098a57fe5b60200260200101519050600160028111156109a157fe5b8660028111156109ad57fe5b1415610a9f5782871115610a505760006109d56305f5e1006109cf848761117d565b9061117d565b905060006109e28b6111df565b905060006109ff60646109f9886305f5e10061117d565b90611221565b9050610a19610a128b6109cf858961117d565b8290611288565b9050610a36610a12610a2b8c896112e2565b6305f5e1009061117d565b9050610a428382611221565b975050505050505050610728565b6000610a646305f5e1006109cf848761117d565b90506000610a718b6111df565b90506000610a36610a8b60646109f9896305f5e10061117d565b610a99876109cf868f61117d565b90611288565b82871015610b1a576000610abd846109cf6305f5e10081868d61117d565b90506000610aca8b6111df565b90506000610ae5866109cf60646109f98e6305f5e10061117d565b9050610afa610a12876109cf8181878b61117d565b9050610a36610a12610b0c888d6112e2565b6109cf8d6305f5e10061117d565b6000610b2e6305f5e1006109cf848b61117d565b90506000610b3b8b6111df565b90506000610a36610b5560646109f98d6305f5e10061117d565b610a99876109cf868b61117d565b6003546040516323b872dd60e01b81526000916001600160a01b0316906323b872dd90610b9890339030908c90600401611609565b602060405180830381600087803b158015610bb257600080fd5b505af1158015610bc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bea9190611479565b610c065760405162461bcd60e51b815260040161077390611771565b600080546040516307211ef760e01b81526001600160a01b03909116906307211ef790610c3c9084906001908d906004016116b8565b60206040518083038186803b158015610c5457600080fd5b505afa158015610c68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8c91906114b1565b60035460005460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b392610cc49216908c9060040161162d565b602060405180830381600087803b158015610cde57600080fd5b505af1158015610cf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d169190611479565b5060008054604051635320bf6b60e11b815283926001600160a01b039092169163a6417ed691610d5091906001908e908790600401611695565b602060405180830381600087803b158015610d6a57600080fd5b505af1158015610d7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da291906114b1565b14610dbf5760405162461bcd60e51b8152600401610773906116d6565b60025460405163d06ca61f60e01b81526000916001600160a01b03169063d06ca61f90610df39085906008906004016117c8565b60006040518083038186803b158015610e0b57600080fd5b505afa158015610e1f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e4791908101906113cb565b90508381600181518110610e5757fe5b602002602001015111610e7c5760405162461bcd60e51b81526004016107739061173a565b6004805460025460405163095ea7b360e01b81526001600160a01b039283169363095ea7b393610eb093169187910161162d565b602060405180830381600087803b158015610eca57600080fd5b505af1158015610ede573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f029190611479565b506002546040516318cbafe560e01b81526001600160a01b03909116906318cbafe590610f3c908590889060089030904290600401611813565b600060405180830381600087803b158015610f5657600080fd5b505af1158015610f6a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f9291908101906113cb565b90506000610fb68883600181518110610fa757fe5b60200260200101518b89610730565b6001805484519293506001600160a01b0316916380478ad19185918110610fd957fe5b60200260200101518a848d8b6040518663ffffffff1660e01b8152600401611004949392919061184f565b6020604051808303818588803b15801561101d57600080fd5b505af1158015611031573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061105691906114b1565b60015460405163b7760c8f60e01b81529195506001600160a01b03169063b7760c8f906110899087908b906004016117b1565b600060405180830381600087803b1580156110a357600080fd5b505af11580156110b7573d6000803e3d6000fd5b50505050866001600160a01b03167fe449c77d99738f1181f3e8a97bc3c10c842af5b92aa379a34eb4d6bc1a137a79858c600360009054906101000a90046001600160a01b03168660018151811061110b57fe5b602002602001015160405161112394939291906117ef565b60405180910390a2505033600090815260076020908152604080832081518083019092528582528183018c815281546001818101845592865293909420915160029093029091019182559151910155509695505050505050565b60008261118c575060006111d9565b8282028284828161119957fe5b04146111d65760405162461bcd60e51b81526004018080602001828103825260218152602001806118966021913960400191505060405180910390fd5b90505b92915050565b8060006111f26001610a99846002611221565b90505b8181101561121b578061121160026109f983610a998882611221565b90925090506111f5565b50919050565b6000808211611277576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161128057fe5b049392505050565b6000828201838110156111d6576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082821115611339576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b80356003811061031a57600080fd5b805169ffffffffffffffffffff8116811461031a57600080fd5b600060208284031215611379578081fd5b81356111d68161187d565b600060208284031215611395578081fd5b81516111d68161187d565b600080604083850312156113b2578081fd5b82356113bd8161187d565b946020939093013593505050565b600060208083850312156113dd578182fd5b825167ffffffffffffffff808211156113f4578384fd5b818501915085601f830112611407578384fd5b81518181111561141357fe5b8381026040518582820101818110858211171561142c57fe5b604052828152858101935084860182860187018a101561144a578788fd5b8795505b8386101561146c57805185526001959095019493860193860161144e565b5098975050505050505050565b60006020828403121561148a578081fd5b815180151581146111d6578182fd5b6000602082840312156114aa578081fd5b5035919050565b6000602082840312156114c2578081fd5b5051919050565b60008060008060008060c087890312156114e1578182fd5b86359550602087013594506040870135935060608701356115018161187d565b925061150f6080880161133f565b915060a087013590509295509295509295565b60008060008060808587031215611537578384fd5b8435935060208501359250604085013591506115556060860161133f565b905092959194509250565b600080600080600060a08688031215611577578081fd5b6115808661134e565b94506020860151935060408601519250606086015191506115a36080870161134e565b90509295509295909350565b6000815480845260208085019450838352808320835b838110156115ea5781546001600160a01b0316875295820195600191820191016115c5565b509495945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b602080825282518282018190526000919060409081850190868401855b8281101561168857815180518552860151868501529284019290850190600101611663565b5091979650505050505050565b600f94850b81529290930b60208301526040820152606081019190915260800190565b600f93840b81529190920b6020820152604081019190915260600190565b6020808252601c908201527f5442442f63616e6e6f742d737761702d616c7573642d746f2d64616900000000604082015260600190565b602080825260139082015272696e76616c6964206f7074696f6e207479706560681b604082015260600190565b60208082526017908201527f5442442f6d696e2d6574682d6e6f742d72656163686564000000000000000000604082015260600190565b60208082526019908201527f5442442f63616e6e6f742d7472616e736665722d616c75736400000000000000604082015260600190565b90815260200190565b9182526001600160a01b0316602082015260400190565b60008382526040602083015261072860408301846115af565b918252602082015260400190565b93845260208401929092526001600160a01b03166040830152606082015260800190565b600086825285602083015260a0604083015261183260a08301866115af565b6001600160a01b0394909416606083015250608001529392505050565b8481526020810184905260408101839052608081016003831061186e57fe5b82606083015295945050505050565b6001600160a01b038116811461189257600080fd5b5056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a264697066735822122035638aa1ca045a99a692a8af8523e18f53d0b258140137c0bcccac2b5a54fa9264736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getAmount(uint256,uint256,uint256,uint8)": {
        "params": {
          "fees": "Amount of Eth paid",
          "optionType": "1 for PUT, 2 for CALL",
          "period": "Option period in seconds (min 1 day, max 28 days) ",
          "strike": "Strike price (with 8 decimals)"
        }
      },
      "getEthFeeFromAlUSD(uint256)": {
        "params": {
          "amount": "alUSD amount used"
        }
      },
      "getOptionAmountFromAlUSD(uint256,uint256,uint256,uint8)": {
        "params": {
          "amount": "Amount of AlUSD paid",
          "optionType": "1 for PUT, 2 for CALL",
          "period": "Option period in seconds (min 1 day, max 28 days) ",
          "strike": "Strike price (with 8 decimals)"
        }
      },
      "getOptionsByOwner(address)": {
        "params": {
          "owner": "Owner of the options to retrieve"
        }
      },
      "getUnderlyingFeeFromAlUSD(uint256)": {
        "params": {
          "amount": "alUSD amount used"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getAmount(uint256,uint256,uint256,uint8)": {
        "notice": "Retrieve the option size from the raw eth fee paid to Hegic"
      },
      "getEthFeeFromAlUSD(uint256)": {
        "notice": "Retrieve option creation cost in eth"
      },
      "getOptionAmountFromAlUSD(uint256,uint256,uint256,uint8)": {
        "notice": "Retrieve the option size depending on all parameters + alUSD paid"
      },
      "getOptionsByOwner(address)": {
        "notice": "Retrieve created options"
      },
      "getUnderlyingFeeFromAlUSD(uint256)": {
        "notice": "Retrieve option creation cost in the underlying token"
      },
      "purchaseOptionWithAlUSD(uint256,uint256,uint256,address,uint8,uint256)": {
        "notice": "ITBD overriden functions"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 505,
        "contract": "contracts/TBDBTC.sol:TBDBTC",
        "label": "alUSDMetaPool",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ICurve)3912"
      },
      {
        "astId": 507,
        "contract": "contracts/TBDBTC.sol:TBDBTC",
        "label": "hegicBTCOptions",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IHegicBTCOptions)4047"
      },
      {
        "astId": 509,
        "contract": "contracts/TBDBTC.sol:TBDBTC",
        "label": "uniswapV2Router02",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IUniswapV2Router02)4376"
      },
      {
        "astId": 511,
        "contract": "contracts/TBDBTC.sol:TBDBTC",
        "label": "alUSD",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)3942"
      },
      {
        "astId": 513,
        "contract": "contracts/TBDBTC.sol:TBDBTC",
        "label": "Dai",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)3942"
      },
      {
        "astId": 515,
        "contract": "contracts/TBDBTC.sol:TBDBTC",
        "label": "Wbtc",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IERC20)3942"
      },
      {
        "astId": 517,
        "contract": "contracts/TBDBTC.sol:TBDBTC",
        "label": "Weth",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IWETH)4387"
      },
      {
        "astId": 522,
        "contract": "contracts/TBDBTC.sol:TBDBTC",
        "label": "optionsByOwner",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_struct(Option)4178_storage)dyn_storage)"
      },
      {
        "astId": 525,
        "contract": "contracts/TBDBTC.sol:TBDBTC",
        "label": "uniswapExchangePath",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 528,
        "contract": "contracts/TBDBTC.sol:TBDBTC",
        "label": "uniswapBtcExchangePath",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Option)4178_storage)dyn_storage": {
        "base": "t_struct(Option)4178_storage",
        "encoding": "dynamic_array",
        "label": "struct ITBD.Option[]",
        "numberOfBytes": "32"
      },
      "t_contract(ICurve)3912": {
        "encoding": "inplace",
        "label": "contract ICurve",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)3942": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IHegicBTCOptions)4047": {
        "encoding": "inplace",
        "label": "contract IHegicBTCOptions",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)4376": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_contract(IWETH)4387": {
        "encoding": "inplace",
        "label": "contract IWETH",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Option)4178_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ITBD.Option[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Option)4178_storage)dyn_storage"
      },
      "t_struct(Option)4178_storage": {
        "encoding": "inplace",
        "label": "struct ITBD.Option",
        "members": [
          {
            "astId": 4175,
            "contract": "contracts/TBDBTC.sol:TBDBTC",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4177,
            "contract": "contracts/TBDBTC.sol:TBDBTC",
            "label": "priceInAlUSD",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}