{
  "address": "0xa77B9c30d9A367275460d2A77E453af708Aa88d6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_hegicETHOptions",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_alUSD",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_Dai",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_Weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_alUSDMetaPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapV2Router02",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "optionID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purchasePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "purchaseToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        }
      ],
      "name": "PurchaseOption",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "strike",
          "type": "uint256"
        },
        {
          "internalType": "enum IHegicETHOptions.OptionType",
          "name": "optionType",
          "type": "uint8"
        }
      ],
      "name": "getAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getEthAmountFromAlUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "strike",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "enum IHegicETHOptions.OptionType",
          "name": "optionType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "minETH",
          "type": "uint256"
        }
      ],
      "name": "purchaseEthOptionWithAlUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "optionID",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uniswapExchangePath",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6079be923ef20f236101ba14d50736acb89f6565c8bb57cf4c9f51cb7451628c",
  "receipt": {
    "to": null,
    "from": "0x634FC1A8ADdBB59aD54A7e825a0d70Aa40d3f157",
    "contractAddress": "0xa77B9c30d9A367275460d2A77E453af708Aa88d6",
    "transactionIndex": 0,
    "gasUsed": "1141363",
    "logsBloom": "0x
    "blockHash": "0x25c10bb82a4d943e45967ce79d76d3f09d3acb0d424f91e1eea34ba0749aef58",
    "transactionHash": "0x6079be923ef20f236101ba14d50736acb89f6565c8bb57cf4c9f51cb7451628c",
    "logs": [],
    "blockNumber": 12522191,
    "cumulativeGasUsed": "1141363",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xEfC0eEAdC1132A12c9487d800112693bf49EcfA2",
    "0xBC6DA0FE9aD5f3b0d58160288917AA56653660E9",
    "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
    "0x6B175474E89094C44Da98b954EedeAC495271d0F",
    "0x43b4fdfd4ff969587185cdb6f0bd875c5fc83f8c",
    "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D"
  ],
  "solcInputHash": "082193e5cbe36a9ebd7b581d6a2b4cc9",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hegicETHOptions\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_alUSD\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Dai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_alUSDMetaPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapV2Router02\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchasePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"purchaseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"PurchaseOption\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strike\",\"type\":\"uint256\"},{\"internalType\":\"enum IHegicETHOptions.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"}],\"name\":\"getAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getEthAmountFromAlUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strike\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enum IHegicETHOptions.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minETH\",\"type\":\"uint256\"}],\"name\":\"purchaseEthOptionWithAlUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"optionID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniswapExchangePath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TBDETH.sol\":\"TBDETH\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"contracts/TBDETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\nimport './interfaces/IHegicETHOptions.sol';\\nimport './interfaces/ICurve.sol';\\nimport './interfaces/IUniswapV2Router02.sol';\\nimport './interfaces/IChainlinkAggregatorV3.sol';\\nimport './interfaces/IERC20.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport './interfaces/IWETH.sol';\\n\\ncontract TBDETH {\\n    using SafeMath for uint256;\\n\\n    ICurve alUSDMetaPool;\\n    IHegicETHOptions hegicETHOptions;\\n    IUniswapV2Router02 uniswapV2Router02;\\n    IERC20 alUSD;\\n    IERC20 Dai;\\n    IWETH Weth;\\n    address[] public uniswapExchangePath;\\n    uint256 constant PRICE_DECIMALS = 1e8;\\n\\n    event PurchaseOption(address indexed owner, uint256 optionID, uint256 purchasePrice, address purchaseToken, uint256 fees);\\n\\n    constructor(\\n        address _hegicETHOptions,\\n        address _alUSD,\\n        address _Dai,\\n        address _Weth,\\n        address _alUSDMetaPool,\\n        address _uniswapV2Router02\\n    ) {\\n        alUSDMetaPool = ICurve(_alUSDMetaPool);\\n        hegicETHOptions = IHegicETHOptions(_hegicETHOptions);\\n        alUSD = IERC20(_alUSD);\\n        Dai = IERC20(_Dai);\\n        Weth = IWETH(_Weth);\\n        uniswapV2Router02 = IUniswapV2Router02(_uniswapV2Router02);\\n\\n        uniswapExchangePath = new address[](2);\\n        uniswapExchangePath[0] = _Dai;\\n        uniswapExchangePath[1] = _Weth;\\n    }\\n\\n    function purchaseEthOptionWithAlUSD(\\n        uint256 amount,\\n        uint256 strike,\\n        uint256 period,\\n        address owner,\\n        IHegicETHOptions.OptionType optionType,\\n        uint256 minETH\\n    ) public returns (uint256 optionID) {\\n        require(alUSD.transferFrom(msg.sender, address(this), amount), 'TBD/cannot-transfer-alusd');\\n\\n        uint256 curveDyInDai = alUSDMetaPool.get_dy_underlying(0, 1, amount);\\n        alUSD.approve(address(alUSDMetaPool), amount);\\n        require(\\n            alUSDMetaPool.exchange_underlying(int128(0), int128(1), amount, curveDyInDai) == curveDyInDai,\\n            'TBD/cannot-swap-alusd-to-dai'\\n        );\\n\\n        Dai.approve(address(uniswapV2Router02), curveDyInDai);\\n\\n        uint256[] memory uniswapAmounts = uniswapV2Router02.swapExactTokensForETH(\\n            curveDyInDai,\\n            minETH,\\n            uniswapExchangePath,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n\\n        uint256 optionAmount = getAmount(period, uniswapAmounts[1], strike, optionType);\\n\\n        optionID = hegicETHOptions.create{value: uniswapAmounts[1]}(period, optionAmount, strike, optionType);\\n        hegicETHOptions.transfer(optionID, payable(owner));\\n\\n        emit PurchaseOption(owner, optionID, amount, address(alUSD), uniswapAmounts[1]);\\n\\n        return optionID;\\n    }\\n\\n    receive() external payable {}\\n\\n    function getEthAmountFromAlUSD(uint256 amount) external view returns (uint256) {\\n        uint256 curveDyInDai = alUSDMetaPool.get_dy_underlying(0, 1, amount);\\n        uint256[] memory uniswapWethOutput = uniswapV2Router02.getAmountsOut(curveDyInDai, uniswapExchangePath);\\n        return uniswapWethOutput[1];\\n    }\\n\\n    function getAmount(\\n        uint256 period,\\n        uint256 fees,\\n        uint256 strike,\\n        IHegicETHOptions.OptionType optionType\\n    ) public view returns (uint256) {\\n        require(\\n            optionType == IHegicETHOptions.OptionType.Put || optionType == IHegicETHOptions.OptionType.Call,\\n            'invalid option type'\\n        );\\n        (, int256 latestPrice, , , ) = IChainlinkAggregatorV3(hegicETHOptions.priceProvider()).latestRoundData();\\n        uint256 currentPrice = uint256(latestPrice);\\n        uint256 iv = hegicETHOptions.impliedVolRate();\\n\\n        if (optionType == IHegicETHOptions.OptionType.Put) {\\n            if (strike > currentPrice) {\\n                // ITM Put Fee\\n                uint256 nume = fees.mul(currentPrice).mul(PRICE_DECIMALS);\\n                uint256 sqrtPeriod = sqrt(period);\\n                uint256 denom = currentPrice.mul(PRICE_DECIMALS).div(100);\\n                denom = denom.add(sqrtPeriod.mul(iv).mul(strike));\\n                denom = denom.add(PRICE_DECIMALS.mul(strike.sub(currentPrice)));\\n                return nume.div(denom);\\n            } else {\\n                // OTM Put Fee\\n                uint256 nume = fees.mul(currentPrice).mul(PRICE_DECIMALS);\\n                uint256 sqrtPeriod = sqrt(period);\\n                uint256 denom = sqrtPeriod.mul(strike).mul(iv).add(currentPrice.mul(PRICE_DECIMALS).div(100));\\n                return nume.div(denom);\\n            }\\n        } else {\\n            if (strike < currentPrice) {\\n                // ITM Call Fee\\n                uint256 nume = fees.mul(strike).mul(PRICE_DECIMALS).mul(currentPrice);\\n                uint256 sqrtPeriod = sqrt(period);\\n                uint256 denom = strike.mul(PRICE_DECIMALS).div(100).mul(currentPrice);\\n                denom = denom.add(sqrtPeriod.mul(iv).mul(currentPrice).mul(currentPrice));\\n                denom = denom.add(strike.mul(PRICE_DECIMALS).mul(currentPrice.sub(strike)));\\n                return nume.div(denom);\\n            } else {\\n                // OTM Call Fee\\n                uint256 nume = fees.mul(strike).mul(PRICE_DECIMALS);\\n                uint256 sqrtPeriod = sqrt(period);\\n                uint256 denom = sqrtPeriod.mul(currentPrice).mul(iv).add(strike.mul(PRICE_DECIMALS).div(100));\\n                return nume.div(denom);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @return result Square root of the number\\n     */\\n    function sqrt(uint256 x) private pure returns (uint256 result) {\\n        result = x;\\n        uint256 k = x.div(2).add(1);\\n        while (k < result) (result, k) = (k, x.div(k).add(k).div(2));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x253b895034885d7dad06f25138b1c127b851fa0c72097a6f4a3919a722a5f2f7\",\"license\":\"MIT\"},\"contracts/interfaces/IChainlinkAggregatorV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface IChainlinkAggregatorV3 {\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x6bf83183d5b801ce3043ca958ee7876dbc487af64043bef4e20ad86d26cd4659\",\"license\":\"MIT\"},\"contracts/interfaces/ICurve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface ICurve {\\n    function get_dy_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x1e1d03f38cfdee89ae8a8792e463c5a4209a96b605480c53399ebabfc0877adc\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface IERC20 {\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x849f728bdcb28a2e01f4280f64cbbaf982cded062f1a9aefe8039f7aa28726af\",\"license\":\"MIT\"},\"contracts/interfaces/IHegicETHOptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface IHegicETHOptions {\\n    function priceProvider() external view returns (address);\\n\\n    function impliedVolRate() external view returns (uint256);\\n\\n    enum OptionType {Invalid, Put, Call}\\n\\n    enum State {Inactive, Active, Exercised, Expired}\\n\\n    function exercise(uint256 optionID) external;\\n\\n    function options(uint256)\\n        external\\n        view\\n        returns (\\n            State state,\\n            address payable holder,\\n            uint256 strike,\\n            uint256 amount,\\n            uint256 lockedAmount,\\n            uint256 premium,\\n            uint256 expiration,\\n            OptionType optionType\\n        );\\n\\n    struct Option {\\n        State state;\\n        address payable holder;\\n        uint256 strike;\\n        uint256 amount;\\n        uint256 lockedAmount;\\n        uint256 premium;\\n        uint256 expiration;\\n        OptionType optionType;\\n    }\\n\\n    function fees(\\n        uint256 period,\\n        uint256 amount,\\n        uint256 strike,\\n        OptionType optionType\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 total,\\n            uint256 settlementFee,\\n            uint256 strikeFee,\\n            uint256 periodFee\\n        );\\n\\n    function create(\\n        uint256 period,\\n        uint256 amount,\\n        uint256 strike,\\n        OptionType optionType\\n    ) external payable returns (uint256 optionID);\\n\\n    function transfer(uint256 optionID, address payable newHolder) external;\\n}\\n\",\"keccak256\":\"0x4691d843ef0b22faea1aa72e982f32d8db4cd16983f102d81a3ff4ea7425aa52\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface IUniswapV2Router02 {\\n    function getAmountsOut(uint256 amountIn, address[] memory path) external view returns (uint256[] memory amounts);\\n\\nfunction swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n  external\\n  returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0xb2ca7515eeddc7f1ad059577ed6a8800ef4fc414ed23b56dab540aa7a31d646a\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\nimport './IERC20.sol';\\n\\ninterface IWETH is IERC20 {\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0x4af11c50532a882b5e27cb1a76168a0ada2e5e780dcf34e5f5b887f6ea35685d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516200120e3803806200120e833981810160405260c081101561003557600080fd5b508051602082015160408301516060840151608085015160a090950151600080546001600160a01b03199081166001600160a01b03808a16919091178355600180548316828a1617905560038054831682891617905560048054831682881617905560058054831682871617905560028054909216908416178155959694959394929390506040519080825280602002602001820160405280156100e3578160200160208202803683370190505b5080516100f89160069160209091019061017e565b5083600660008154811061010857fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555082600660018154811061014557fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505050505050506101f8565b8280548282559060005260206000209081019282156101d3579160200282015b828111156101d357825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061019e565b506101df9291506101e3565b5090565b5b808211156101df57600081556001016101e4565b61100680620002086000396000f3fe6080604052600436106100435760003560e01c8063853e72be1461004f57806397bcb1a7146100b5578063e8d53be6146100fb578063fe02049c1461013a5761004a565b3661004a57005b600080fd5b34801561005b57600080fd5b506100a3600480360360c081101561007257600080fd5b508035906020810135906040810135906001600160a01b036060820135169060ff6080820135169060a00135610164565b60408051918252519081900360200190f35b3480156100c157600080fd5b506100df600480360360208110156100d857600080fd5b503561081b565b604080516001600160a01b039092168252519081900360200190f35b34801561010757600080fd5b506100a36004803603608081101561011e57600080fd5b508035906020810135906040810135906060013560ff16610845565b34801561014657600080fd5b506100a36004803603602081101561015d57600080fd5b5035610bd9565b600354604080516323b872dd60e01b81523360048201523060248201526044810189905290516000926001600160a01b0316916323b872dd91606480830192602092919082900301818787803b1580156101bd57600080fd5b505af11580156101d1573d6000803e3d6000fd5b505050506040513d60208110156101e757600080fd5b505161023a576040805162461bcd60e51b815260206004820152601960248201527f5442442f63616e6e6f742d7472616e736665722d616c75736400000000000000604482015290519081900360640190fd5b60008054604080516307211ef760e01b81526004810184905260016024820152604481018b905290516001600160a01b03909216916307211ef791606480820192602092909190829003018186803b15801561029557600080fd5b505afa1580156102a9573d6000803e3d6000fd5b505050506040513d60208110156102bf57600080fd5b5051600354600080546040805163095ea7b360e01b81526001600160a01b039283166004820152602481018e9052905194955092169263095ea7b3926044808201936020939283900390910190829087803b15801561031d57600080fd5b505af1158015610331573d6000803e3d6000fd5b505050506040513d602081101561034757600080fd5b50506000805460408051635320bf6b60e11b81526004810184905260016024820152604481018c905260648101859052905184936001600160a01b039093169263a6417ed692608480820193602093909283900390910190829087803b1580156103b057600080fd5b505af11580156103c4573d6000803e3d6000fd5b505050506040513d60208110156103da57600080fd5b50511461042e576040805162461bcd60e51b815260206004820152601c60248201527f5442442f63616e6e6f742d737761702d616c7573642d746f2d64616900000000604482015290519081900360640190fd5b600480546002546040805163095ea7b360e01b81526001600160a01b0392831694810194909452602484018590525191169163095ea7b39160448083019260209291908290030181600087803b15801561048757600080fd5b505af115801561049b573d6000803e3d6000fd5b505050506040513d60208110156104b157600080fd5b50506002546040516318cbafe560e01b815260048101838152602482018690523060648301819052426084840181905260a0604485019081526006805460a487018190526000976001600160a01b0316966318cbafe5968a968d9694959094939192909160c4909101908690801561055257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610534575b50509650505050505050600060405180830381600087803b15801561057657600080fd5b505af115801561058a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156105b357600080fd5b81019080805160405193929190846401000000008211156105d357600080fd5b9083019060208201858111156105e857600080fd5b825186602082028301116401000000008211171561060557600080fd5b82525081516020918201928201910280838360005b8381101561063257818101518382015260200161061a565b5050505090500160405250505090506000610663888360018151811061065457fe5b60200260200101518b89610845565b6001805484519293506001600160a01b0316916380478ad1918591811061068657fe5b60200260200101518a848d8b6040518663ffffffff1660e01b8152600401808581526020018481526020018381526020018260028111156106c357fe5b81526020019450505050506020604051808303818588803b1580156106e757600080fd5b505af11580156106fb573d6000803e3d6000fd5b50505050506040513d602081101561071257600080fd5b50516001546040805163b7760c8f60e01b8152600481018490526001600160a01b038b81166024830152915193975091169163b7760c8f9160448082019260009290919082900301818387803b15801561076b57600080fd5b505af115801561077f573d6000803e3d6000fd5b50505050866001600160a01b03167fe449c77d99738f1181f3e8a97bc3c10c842af5b92aa379a34eb4d6bc1a137a79858c600360009054906101000a90046001600160a01b0316866001815181106107d357fe5b602002602001015160405180858152602001848152602001836001600160a01b0316815260200182815260200194505050505060405180910390a25050509695505050505050565b6006818154811061082b57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000600182600281111561085557fe5b148061086c5750600282600281111561086a57fe5b145b6108b3576040805162461bcd60e51b8152602060048201526013602482015272696e76616c6964206f7074696f6e207479706560681b604482015290519081900360640190fd5b60015460408051635c4443cf60e11b815290516000926001600160a01b03169163b888879e916004808301926020929190829003018186803b1580156108f857600080fd5b505afa15801561090c573d6000803e3d6000fd5b505050506040513d602081101561092257600080fd5b505160408051633fabe5a360e21b815290516001600160a01b039092169163feaf968c9160048082019260a092909190829003018186803b15801561096657600080fd5b505afa15801561097a573d6000803e3d6000fd5b505050506040513d60a081101561099057600080fd5b50602090810151600154604080516318f88e5b60e01b8152905192945084936000936001600160a01b03909316926318f88e5b926004808201939291829003018186803b1580156109e057600080fd5b505afa1580156109f4573d6000803e3d6000fd5b505050506040513d6020811015610a0a57600080fd5b505190506001856002811115610a1c57fe5b1415610b0d5781861115610abe576000610a446305f5e100610a3e8a86610ded565b90610ded565b90506000610a518a610e4f565b90506000610a6e6064610a68876305f5e100610ded565b90610e91565b9050610a88610a818a610a3e8588610ded565b8290610ef8565b9050610aa5610a81610a9a8b88610f52565b6305f5e10090610ded565b9050610ab18382610e91565b9650505050505050610bd1565b6000610ad26305f5e100610a3e8a86610ded565b90506000610adf8a610e4f565b90506000610aa5610af96064610a68886305f5e100610ded565b610b0786610a3e868e610ded565b90610ef8565b81861015610b88576000610b2b83610a3e6305f5e100818c8c610ded565b90506000610b388a610e4f565b90506000610b5385610a3e6064610a688d6305f5e100610ded565b9050610b68610a8186610a3e8181878a610ded565b9050610aa5610a81610b7a878c610f52565b610a3e8c6305f5e100610ded565b6000610b9c6305f5e100610a3e8a8a610ded565b90506000610ba98a610e4f565b90506000610aa5610bc36064610a688c6305f5e100610ded565b610b0786610a3e868a610ded565b949350505050565b60008054604080516307211ef760e01b8152600481018490526001602482015260448101859052905183926001600160a01b0316916307211ef7916064808301926020929190829003018186803b158015610c3357600080fd5b505afa158015610c47573d6000803e3d6000fd5b505050506040513d6020811015610c5d57600080fd5b50516002546040805163d06ca61f60e01b8152600481018481526024820192835260068054604484018190529596506000956001600160a01b039095169463d06ca61f948894929392909160649091019084908015610ce557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610cc7575b5050935050505060006040518083038186803b158015610d0457600080fd5b505afa158015610d18573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610d4157600080fd5b8101908080516040519392919084640100000000821115610d6157600080fd5b908301906020820185811115610d7657600080fd5b8251866020820283011164010000000082111715610d9357600080fd5b82525081516020918201928201910280838360005b83811015610dc0578181015183820152602001610da8565b50505050905001604052505050905080600181518110610ddc57fe5b602002602001015192505050919050565b600082610dfc57506000610e49565b82820282848281610e0957fe5b0414610e465760405162461bcd60e51b8152600401808060200182810382526021815260200180610fb06021913960400191505060405180910390fd5b90505b92915050565b806000610e626001610b07846002610e91565b90505b81811015610e8b5780610e816002610a6883610b078882610e91565b9092509050610e65565b50919050565b6000808211610ee7576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610ef057fe5b049392505050565b600082820183811015610e46576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082821115610fa9576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b5090039056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a264697066735822122014321a24ba313cedcde0166179c71ce1bfb56d21539bc497b0352bcf2c060d9064736f6c63430007060033",
  "deployedBytecode": "0x6080604052600436106100435760003560e01c8063853e72be1461004f57806397bcb1a7146100b5578063e8d53be6146100fb578063fe02049c1461013a5761004a565b3661004a57005b600080fd5b34801561005b57600080fd5b506100a3600480360360c081101561007257600080fd5b508035906020810135906040810135906001600160a01b036060820135169060ff6080820135169060a00135610164565b60408051918252519081900360200190f35b3480156100c157600080fd5b506100df600480360360208110156100d857600080fd5b503561081b565b604080516001600160a01b039092168252519081900360200190f35b34801561010757600080fd5b506100a36004803603608081101561011e57600080fd5b508035906020810135906040810135906060013560ff16610845565b34801561014657600080fd5b506100a36004803603602081101561015d57600080fd5b5035610bd9565b600354604080516323b872dd60e01b81523360048201523060248201526044810189905290516000926001600160a01b0316916323b872dd91606480830192602092919082900301818787803b1580156101bd57600080fd5b505af11580156101d1573d6000803e3d6000fd5b505050506040513d60208110156101e757600080fd5b505161023a576040805162461bcd60e51b815260206004820152601960248201527f5442442f63616e6e6f742d7472616e736665722d616c75736400000000000000604482015290519081900360640190fd5b60008054604080516307211ef760e01b81526004810184905260016024820152604481018b905290516001600160a01b03909216916307211ef791606480820192602092909190829003018186803b15801561029557600080fd5b505afa1580156102a9573d6000803e3d6000fd5b505050506040513d60208110156102bf57600080fd5b5051600354600080546040805163095ea7b360e01b81526001600160a01b039283166004820152602481018e9052905194955092169263095ea7b3926044808201936020939283900390910190829087803b15801561031d57600080fd5b505af1158015610331573d6000803e3d6000fd5b505050506040513d602081101561034757600080fd5b50506000805460408051635320bf6b60e11b81526004810184905260016024820152604481018c905260648101859052905184936001600160a01b039093169263a6417ed692608480820193602093909283900390910190829087803b1580156103b057600080fd5b505af11580156103c4573d6000803e3d6000fd5b505050506040513d60208110156103da57600080fd5b50511461042e576040805162461bcd60e51b815260206004820152601c60248201527f5442442f63616e6e6f742d737761702d616c7573642d746f2d64616900000000604482015290519081900360640190fd5b600480546002546040805163095ea7b360e01b81526001600160a01b0392831694810194909452602484018590525191169163095ea7b39160448083019260209291908290030181600087803b15801561048757600080fd5b505af115801561049b573d6000803e3d6000fd5b505050506040513d60208110156104b157600080fd5b50506002546040516318cbafe560e01b815260048101838152602482018690523060648301819052426084840181905260a0604485019081526006805460a487018190526000976001600160a01b0316966318cbafe5968a968d9694959094939192909160c4909101908690801561055257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610534575b50509650505050505050600060405180830381600087803b15801561057657600080fd5b505af115801561058a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156105b357600080fd5b81019080805160405193929190846401000000008211156105d357600080fd5b9083019060208201858111156105e857600080fd5b825186602082028301116401000000008211171561060557600080fd5b82525081516020918201928201910280838360005b8381101561063257818101518382015260200161061a565b5050505090500160405250505090506000610663888360018151811061065457fe5b60200260200101518b89610845565b6001805484519293506001600160a01b0316916380478ad1918591811061068657fe5b60200260200101518a848d8b6040518663ffffffff1660e01b8152600401808581526020018481526020018381526020018260028111156106c357fe5b81526020019450505050506020604051808303818588803b1580156106e757600080fd5b505af11580156106fb573d6000803e3d6000fd5b50505050506040513d602081101561071257600080fd5b50516001546040805163b7760c8f60e01b8152600481018490526001600160a01b038b81166024830152915193975091169163b7760c8f9160448082019260009290919082900301818387803b15801561076b57600080fd5b505af115801561077f573d6000803e3d6000fd5b50505050866001600160a01b03167fe449c77d99738f1181f3e8a97bc3c10c842af5b92aa379a34eb4d6bc1a137a79858c600360009054906101000a90046001600160a01b0316866001815181106107d357fe5b602002602001015160405180858152602001848152602001836001600160a01b0316815260200182815260200194505050505060405180910390a25050509695505050505050565b6006818154811061082b57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000600182600281111561085557fe5b148061086c5750600282600281111561086a57fe5b145b6108b3576040805162461bcd60e51b8152602060048201526013602482015272696e76616c6964206f7074696f6e207479706560681b604482015290519081900360640190fd5b60015460408051635c4443cf60e11b815290516000926001600160a01b03169163b888879e916004808301926020929190829003018186803b1580156108f857600080fd5b505afa15801561090c573d6000803e3d6000fd5b505050506040513d602081101561092257600080fd5b505160408051633fabe5a360e21b815290516001600160a01b039092169163feaf968c9160048082019260a092909190829003018186803b15801561096657600080fd5b505afa15801561097a573d6000803e3d6000fd5b505050506040513d60a081101561099057600080fd5b50602090810151600154604080516318f88e5b60e01b8152905192945084936000936001600160a01b03909316926318f88e5b926004808201939291829003018186803b1580156109e057600080fd5b505afa1580156109f4573d6000803e3d6000fd5b505050506040513d6020811015610a0a57600080fd5b505190506001856002811115610a1c57fe5b1415610b0d5781861115610abe576000610a446305f5e100610a3e8a86610ded565b90610ded565b90506000610a518a610e4f565b90506000610a6e6064610a68876305f5e100610ded565b90610e91565b9050610a88610a818a610a3e8588610ded565b8290610ef8565b9050610aa5610a81610a9a8b88610f52565b6305f5e10090610ded565b9050610ab18382610e91565b9650505050505050610bd1565b6000610ad26305f5e100610a3e8a86610ded565b90506000610adf8a610e4f565b90506000610aa5610af96064610a68886305f5e100610ded565b610b0786610a3e868e610ded565b90610ef8565b81861015610b88576000610b2b83610a3e6305f5e100818c8c610ded565b90506000610b388a610e4f565b90506000610b5385610a3e6064610a688d6305f5e100610ded565b9050610b68610a8186610a3e8181878a610ded565b9050610aa5610a81610b7a878c610f52565b610a3e8c6305f5e100610ded565b6000610b9c6305f5e100610a3e8a8a610ded565b90506000610ba98a610e4f565b90506000610aa5610bc36064610a688c6305f5e100610ded565b610b0786610a3e868a610ded565b949350505050565b60008054604080516307211ef760e01b8152600481018490526001602482015260448101859052905183926001600160a01b0316916307211ef7916064808301926020929190829003018186803b158015610c3357600080fd5b505afa158015610c47573d6000803e3d6000fd5b505050506040513d6020811015610c5d57600080fd5b50516002546040805163d06ca61f60e01b8152600481018481526024820192835260068054604484018190529596506000956001600160a01b039095169463d06ca61f948894929392909160649091019084908015610ce557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610cc7575b5050935050505060006040518083038186803b158015610d0457600080fd5b505afa158015610d18573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610d4157600080fd5b8101908080516040519392919084640100000000821115610d6157600080fd5b908301906020820185811115610d7657600080fd5b8251866020820283011164010000000082111715610d9357600080fd5b82525081516020918201928201910280838360005b83811015610dc0578181015183820152602001610da8565b50505050905001604052505050905080600181518110610ddc57fe5b602002602001015192505050919050565b600082610dfc57506000610e49565b82820282848281610e0957fe5b0414610e465760405162461bcd60e51b8152600401808060200182810382526021815260200180610fb06021913960400191505060405180910390fd5b90505b92915050565b806000610e626001610b07846002610e91565b90505b81811015610e8b5780610e816002610a6883610b078882610e91565b9092509050610e65565b50919050565b6000808211610ee7576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610ef057fe5b049392505050565b600082820183811015610e46576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082821115610fa9576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b5090039056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a264697066735822122014321a24ba313cedcde0166179c71ce1bfb56d21539bc497b0352bcf2c060d9064736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1063,
        "contract": "contracts/TBDETH.sol:TBDETH",
        "label": "alUSDMetaPool",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ICurve)1713"
      },
      {
        "astId": 1065,
        "contract": "contracts/TBDETH.sol:TBDETH",
        "label": "hegicETHOptions",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IHegicETHOptions)1953"
      },
      {
        "astId": 1067,
        "contract": "contracts/TBDETH.sol:TBDETH",
        "label": "uniswapV2Router02",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IUniswapV2Router02)1984"
      },
      {
        "astId": 1069,
        "contract": "contracts/TBDETH.sol:TBDETH",
        "label": "alUSD",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)1743"
      },
      {
        "astId": 1071,
        "contract": "contracts/TBDETH.sol:TBDETH",
        "label": "Dai",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)1743"
      },
      {
        "astId": 1073,
        "contract": "contracts/TBDETH.sol:TBDETH",
        "label": "Weth",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IWETH)1995"
      },
      {
        "astId": 1076,
        "contract": "contracts/TBDETH.sol:TBDETH",
        "label": "uniswapExchangePath",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(ICurve)1713": {
        "encoding": "inplace",
        "label": "contract ICurve",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1743": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IHegicETHOptions)1953": {
        "encoding": "inplace",
        "label": "contract IHegicETHOptions",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)1984": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_contract(IWETH)1995": {
        "encoding": "inplace",
        "label": "contract IWETH",
        "numberOfBytes": "20"
      }
    }
  }
}